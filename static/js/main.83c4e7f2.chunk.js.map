{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","services/contactAPI.js","redux/store.js","components/Container/Container.styled.js","components/Container/Container.js","components/Section/Section.styled.js","components/Section/Section.js","components/ContactForm/ContactsForm.styled.js","components/ContactForm/ContactForm.js","components/Contacts/ContactsList.styled.js","redux/contacts/contacts-selectors.js","components/Contacts/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Toast/Toast.jsx","App.js","index.js"],"names":["getFilterValue","createAction","filter","createReducer","actions","_","payload","combineReducers","contactAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","addContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","contactId","useFetchContactsQuery","useAddContactMutation","useDeleteContactMutation","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","phonebook","contactsReducer","devTools","process","setupListeners","dispatch","StyledWrapper","Container","children","Wrapper","Title","Section","title","FormWrapper","Form","Label","Button","ValidationMessage","validationSchema","Yup","shape","name","min","max","required","number","phone","ContactsForm","data","useQueryState","handleAddContactOnSubmit","a","some","toast","error","success","nameInputId","nanoid","phoneInputId","initialValues","onSubmit","values","resetForm","htmlFor","id","type","placeholder","pattern","component","Contacts","Item","state","ContactsList","useSelector","filteredContacts","filterValue","contacts","normalizedFilter","toLowerCase","includes","sort","b","localeCompare","refetchOnReconnect","selectFromResult","isFetching","handleDeleteContactOnClick","map","size","color","onClick","Input","Filter","useDispatch","value","onChange","event","target","Toast","duration","position","containerStyle","top","toastOptions","style","border","padding","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83c4e7f2.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const getFilterValue = createAction(\"filter/get\");","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { actions } from \"redux/contacts\";\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.getFilterValue]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ filter });","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const contactAPI = createApi({\r\n  reducerPath: \"contactAPI\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"https://6129dddc068adf001789b947.mockapi.io/api/v1/\",\r\n  }),\r\n  tagTypes: [\"Contacts\"],\r\n\r\n  endpoints: (builder) => ({\r\n    fetchContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: [\"Contacts\"],\r\n    }),\r\n\r\n    addContact: builder.mutation({\r\n      query: (newContact) => ({\r\n        url: `/contacts`,\r\n        method: \"POST\",\r\n        body: newContact,\r\n      }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n\r\n    deleteContact: builder.mutation({\r\n      query: (contactId) => ({\r\n        url: `/contacts/${contactId}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useFetchContactsQuery,\r\n  useAddContactMutation,\r\n  useDeleteContactMutation,\r\n} = contactAPI;","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"./contacts/contacts-reducers\";\r\nimport { contactAPI } from \"services/contactAPI\";\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger, contactAPI.middleware];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    phonebook: contactsReducer,\r\n    [contactAPI.reducerPath]: contactAPI.reducer,\r\n  },\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n  middleware,\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n\r\nexport { store };","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const StyledWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  background-color: #ffffff;\r\n  border-radius: 5px;\r\n  \r\n  width: 400px;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { StyledWrapper } from \"./Container.styled\";\r\n\r\nexport const Container = ({ children }) => {\r\n  return <StyledWrapper>{children}</StyledWrapper>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Wrapper = styled.section`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 30px;\r\n  padding-bottom: 30px;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-bottom: 20px;\r\n  text-transform: uppercase;\r\n  font-size: 28px;\r\n  font-weight: 700;\r\n  color: black;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { Wrapper, Title } from \"./Section.styled\";\r\n\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};","import styled from \"@emotion/styled/macro\";\r\nimport { Form } from \"formik\";\r\n\r\n\r\n\r\n\r\nexport const FormWrapper = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 100px;\r\n  padding: 10px 12px;\r\n  margin-top: 15px;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: #fff;\r\n  background-color: #651fff;\r\n  border: 1px solid transparent;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  text-transform: capitalize;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n  }\r\n`;\r\n\r\nexport const ValidationMessage = styled.div`\r\n  font-size: 12px;\r\n  color: purple;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n`;","import { nanoid } from \"nanoid\";\r\nimport { Formik, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"yup-phone\";\r\nimport {\r\n  FormWrapper,\r\n  Label,\r\n  Button,\r\n  ValidationMessage,\r\n} from \"./ContactsForm.styled.js\";\r\nimport { useAddContactMutation, contactAPI } from \"services/contactAPI\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  number: Yup.string().phone(\"+38\", true, \"Valid number type +380XXXXXXXXX\"),\r\n});\r\n\r\nfunction ContactsForm() {\r\n  const { data } = contactAPI.endpoints.fetchContacts.useQueryState(null, {});\r\n  const [addContact] = useAddContactMutation();\r\n\r\n  const handleAddContactOnSubmit = async (newContact) => {\r\n    if (data?.some(({ name }) => name === newContact.name)) {\r\n      toast.error(`Contact ${newContact.name} already exists`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await addContact(newContact);\r\n      toast.success(`Contact ${newContact.name} created`);\r\n    } catch (error) {\r\n      toast.error(error);\r\n    }\r\n  };\r\n\r\n  let nameInputId = nanoid(3);\r\n  let phoneInputId = nanoid(3);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: \"\", number: \"\" }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values, { resetForm }) => {\r\n        const { name, number } = values;\r\n        handleAddContactOnSubmit({ name, number });\r\n        resetForm();\r\n      }}\r\n    >\r\n      <FormWrapper>\r\n      <div>  <Label htmlFor={`id-${nameInputId}`}>Name</Label>\r\n        <Field\r\n          id={`id-${nameInputId}`}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        />\r\n        <ErrorMessage name=\"name\" component={ValidationMessage} />\r\n\r\n        <Label htmlFor={`id-${phoneInputId}`}>Number</Label>\r\n        <Field\r\n          id={`id-${phoneInputId}`}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          placeholder=\"+38 XXX XXX XX XX\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        />\r\n        <ErrorMessage name=\"number\" component={ValidationMessage} /></div>\r\n\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </FormWrapper>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default ContactsForm;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Contacts = styled.ul`\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width:300px;\r\n  padding: 10px;\r\n  \r\n  overflow: hidden;\r\n  border-radius: 5px;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  & span {\r\n    // display: inline-flex;\r\n    // align-items: center;\r\n    // margin-left: 10px;\r\n    // margin-right: 40px;\r\n  }\r\n  & svg {\r\n    margin-right: 5px;\r\n  }\r\n  & div{\r\n    display:flex;\r\n     flex-direction:column;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 100px;\r\n  padding: 10px;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: #fff;\r\n  background-color: red;\r\n  border: 1px solid transparent;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  text-transform: capitalize;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n  }\r\n`;","export const getFilterValue = (state) => state.phonebook.filter;","import PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Contacts, Item, Button } from \"./ContactsList.styled\";\r\nimport { IoPerson } from \"react-icons/io5\";\r\nimport { ImPhone } from \"react-icons/im\";\r\nimport { getFilterValue } from \"redux/contacts/contacts-selectors\";\r\nimport toast from \"react-hot-toast\";\r\nimport {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n} from \"services/contactAPI\";\r\n\r\nfunction ContactsList() {\r\n  const filter = useSelector(getFilterValue);\r\n\r\n  const filteredContacts = (filterValue, contacts) => {\r\n    const normalizedFilter = filterValue.toLowerCase();\r\n    return contacts\r\n      ?.filter(\r\n        ({ name, number }) =>\r\n          name.toLowerCase().includes(normalizedFilter) ||\r\n          number.includes(normalizedFilter)\r\n      )\r\n      .sort((a, b) => a.name.localeCompare(b.name));\r\n  };\r\n\r\n  const { contacts, isFetching } = useFetchContactsQuery(null, {\r\n    refetchOnReconnect: true,\r\n    selectFromResult: ({ data }) => ({\r\n      contacts: filteredContacts(filter, data),\r\n    }),\r\n  });\r\n\r\n  const [deleteContact] = useDeleteContactMutation();\r\n\r\n  const handleDeleteContactOnClick = async (id, name) => {\r\n    try {\r\n      await deleteContact(id);\r\n      toast.success(`Contact ${name} deleted`);\r\n    } catch (error) {\r\n      toast.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Contacts>\r\n      {isFetching && <div>Loading...</div>}\r\n      {contacts &&\r\n        contacts.map(({ id, name, number }) => {\r\n          return (\r\n            <Item key={id}>\r\n              <div>\r\n                <span>\r\n                <IoPerson size={14} color=\"steelblue\" />\r\n                {name}:\r\n              </span>\r\n\r\n              <span>\r\n                <ImPhone size={14} color=\"steelblue\" />\r\n                {number}\r\n              </span>\r\n              </div>\r\n              <Button\r\n                type=\"button\"\r\n                onClick={() => handleDeleteContactOnClick(id, name)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Item>\r\n          );\r\n        })}\r\n    </Contacts>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n};\r\n\r\nexport default ContactsList;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const Input = styled.input``;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Label, Input } from \"./Filter.styled\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport { getFilterValue } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilterValue);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Label htmlFor={`id-${nanoid(3)}`}>Find contacts by name</Label>\r\n      <Input\r\n        id={`id-${nanoid(3)}`}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={filter}\r\n        onChange={(event) =>\r\n          dispatch(actions.getFilterValue(event.target.value))\r\n        }\r\n        placeholder=\"Search\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n};\r\n\r\nexport default Filter;","import { Toaster } from \"react-hot-toast\";\r\n\r\nfunction Toast() {\r\n  return (\r\n    <Toaster\r\n      duration=\"5000\"\r\n      position=\"top-right\"\r\n      containerStyle={{ top: 100 }}\r\n      toastOptions={{\r\n        style: {\r\n          border: \"1px solid darksteelblue\",\r\n          padding: \"12px\",\r\n          color: \"darksteelblue\",\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Toast;","import { Container } from \"./components/Container/Container\";\r\nimport { Section } from \"./components/Section/Section\";\r\nimport ContactsForm from \"./components/ContactForm/ContactForm\";\r\nimport ContactsList from \"./components/Contacts/ContactList\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport Toast from \"./components/Toast/Toast\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <Section title=\"Phonebook\">\r\n        <ContactsForm />\r\n      </Section>\r\n\r\n      <Section title=\"Contacts\">\r\n        <Filter />\r\n        <ContactsList />\r\n      </Section>\r\n        <Toast />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { store } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}